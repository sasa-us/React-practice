install nodejs 
npm install create-react-app
create project folder 'react-complete-guide'
if create-react-app react-complete-guide --scripts-version 1.1.5 not works
use:
npx create-react-app react-complete-guide --scripts-version 1.1.5

run:
cd react-complete-guide
npm start

it will show on 
  Local:            http://localhost:3000/
  On Your Network:  http://192.168.1.187:3000/

every assignment after copy to folder need go to this folder
cosole: npm install and then npm start run it.


compiles to the end is the result of react.createElement
all staff in render will be check when rerender occur, and then return sth
state change will tigger render
//----
component is class 
need mport React, {Component} from 'react';
use method render (); to render to DOM
class use same name as file name
// jsx
className vs class 
wrap everything in 1 div root element return 

// react all about component
component is just a function, which return jsx (html in js)
es6 use const

JSX & Component
Component is the core building block of React 
Component tree- root component App ->infinity nested child components
Component need return / render JSX (HTML) to DOM
reuseable
JSX is not HTML, just looks like class->className
JSX is suntactic sugar for js, allow you to write HTMLish code instead by use html style (React.createElement)

import component use uppercase of that component

create component
1 functional component
const cmp = () => { return ( <div> JSX HERE </div>);}
return 
should use functional component as ofen as posibale 
because you should use state carefully
have state in all component and manipulate anywhere in app make app unpredictable and hard to manage



2 class component . container / stateful components
class Cmp extends Component {
  render() { return <div> JSX HERE </div>}
}
render
use { } to wrap js func for dynamic use
----------------------------------------------------
props: outside info
pass data from parent wraping component  to a child by < />  
pass valued parameter between different js file and output them
Person=(props)=> { return {props.name}}

use class based component use {this.props}

<component />
<component> </component>
{props.children} could output anything between closing tag component <></>
------------------------------------------------------
state: inside class component info
inside component
special property: state only use by class component (like constructor)
state's change will rerender& update DOM

------------------------------
40 event handler func use arrow func
if not arrow func, 'this' will not refer to this class and reach state property
then button use {this.xx}
no () after this.xx, since don;t execute it immediately, only click
reference: different event handler
https://reactjs.org/docs/events.html#supported-events

41 change state setState( {
  take obj as argument, merge defined exist state/
});

---------------------------------
state in func component by use 
assign a capitalized variable const App = () => { ... }
--------------------------------

react hook React 16.8
istead of state={}
change class component to function component
collection of func 

set state could use multiple seperate  state slice
useState({
  state's staff
}); 
return array with only two element,
 1st element is access state, // instead of state = 
2nd elem is a function allow us to update/replace this state to re render component //instead of setState()  merge, but replace
so need manually add all in setxxState, or use useState again
use js arr destructing [1st, 2nd] pull element out of the right side 
this.state change to 1st element.state


add func to a functinal component, just add const in front of func name
----------------------------------
stateful component (container component):
manage component no matter useState hook or classbased setState
stateless component (dumb/presentational component):
no state in this component
better to use stateless component in application, only use state in a few component. otherwise it hard to reuse and maintain

pass method to props to call a mehtod which change state in another/parent component
pass new data in method
recommend use bind
1: bind(this, new value)
   onClick={switchNameHandler.bind(this, 'aa')
2 onClick={() => switchNameHandler('aa')}

-----------------------
input change

----------------------
style
1 import css to same component js file
2 inline style:  jsx style={ }  restrict with hover ... only for this element

state can used in class componenet and pass to child func component through props
if use this in side method,should use => arrow function to keep this refer to this class
event.target refer to the the element event occur on. value will be the property of that value

two way bind: when refersh browser, input still same as output not empty
input component add value={props.currentName}
parrent compoennt add currrentName={this.state.usename}

style which component, then import this style './ .css' in this component and add this style 
class /id or any css in this component div not app.js


======================== sec 4= =======================================
add new in state
add { } outside dom element, you can use js statement such as if ...
assign if statement as variable in render and return this var 

------------
56 list use .map( (xx, index) => { return })

delete current person
arr & obj are reference type, only holding a pointer, only change the elemenet point to

do not mutate state directly and js obj is reference type
so we should not mutate it directly since we only get a pointer when reach out to person
hence we would mutate the original object to which this pointer points
so we must create a new js obj, then use spread operator... in front of obj i'm fetching
...obj  (same as ...array) ti will distribute all property into new obj created


map doesnot touch original arr. it will give a new arr after return which is store in 
this const xx
str is not js arr so need add split('') below
const charList = this.state.userInput.map( ch => {
      return <Char character={ch} />
    });



    -------------------------sec 5 style
    create obj style can not use sudo selector hover
    only can use for this elem
to style dynamic (two button different color)

    css file

    can not assign value to const obj after define. but can assign new val to this obj its property

    .join(''), will turn arr of string ['', ''] to string  ' '
------------------------------------------------------
    new package radium 
    npm install --save radium
    it allow to use inline style with sudo selectors and media query
    because inline style cannot use sudo selector hover
    higher order component


    -----------
    media query in component with radium
    put style css in component
  1  need wrap export with radium :  export default Radium(person)
    wrap entire app in StyleRoot component (from Radium) in app.js

 2  import Radium, {StyleRoot} from 'radium';
 3 <StyleRoot>
    entire root div
 </StyleRoot>


 ----------
 new library styled component
 styled button
 remove '' and change camalcase to normal 
eg background-color: green,
 use &:hover 
change to ; as css file

-----------dynamic use styled component
alt={}

tweek configuration use "react-scripts": "1.1.5",
npm run eject
(git add . commit ) then npm run eject again
will give you access to the conflict file. so you can tweak how your codes is bundle together
 eject under the hook configuration where you donnot have access to 
underlying web pack conflict file


modules: true,
localIdentName: '[name]__[local]__[hash:base64:5]'

CSS MODULE scope css to certain component 
=======
============ SEC 6 deubug =================================================================
console use source 
take a debug spot then run app. 
step into each step

2 react developer tool --- not recommend from lfz
----------------------
error boundary not tool use everywhere in app.
only use it when you know it might fail and can not control that
its a nice tool for production to show custom err msg and not fail all app
err boundary is higher order component --- has foudler in src
higher order component is a component which wrap component with a goal of handle any err
that compoent throw
be careful the key position should in outer 
componentDidCatch will be exe when component wrap with err boundary throw err
this.prop.children is whatever we wrap inside error boundary -- default case


what in its own component? what group in higher componenent
1 render should be lean and contain not too much jsx.
  so split its big to seperate component
2 if return has a lot of elem tag. it could seperate to its own component
  so only has one div and cockpit comopent and a {xx} working component

src
components
assets has images
containers containers app and its css

-------class based vs func based
class-based 
0 class xy extends Component
1 state
2 lifecycle
3 use this access state&props (this.state.xy   this.props.xy)
4 lifecycle 

func based
0 const xy = (props) => {}
1 use props access props (props.xy)
2 all component only get input, props
if you can and want to use React hooks then use func

89 lifecycle 
only class based
when props change will sync state

render will return jsx (should not send http request / set time out here to block this render process)
after render, it will render child component

componentDidMount called to get http request, get new data from web and finish 
(should not update state call setState here. it will triger rerender cycle )