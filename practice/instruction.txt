install nodejs 
npm install create-react-app
create project folder 'react-complete-guide'
if create-react-app react-complete-guide --scripts-version 1.1.5 not works
use:
npx create-react-app react-complete-guide --scripts-version 1.1.5

run:
cd react-complete-guide
npm start

it will show on 
  Local:            http://localhost:3000/
  On Your Network:  http://192.168.1.187:3000/


//----
component is class 
need mport React, {Component} from 'react';
use method render (); to render to DOM
class use same name as file name
// jsx
className vs class 
wrap everything in 1 div root element return 

// react all about component
component is just a function, which return jsx (html in js)
es6 use const

JSX & Component
Component is the core building block of React 
Component tree- root component App ->infinity nested child components
Component need return / render JSX (HTML) to DOM
reuseable
JSX is not HTML, just looks like class->className
JSX is suntactic sugar for js, allow you to write HTMLish code instead by use html style (React.createElement)

create component
1 functional component
const cmp = () => { return ( <div> JSX HERE </div>);}
return 
should use functional component as ofen as posibale 
because you should use state carefully
have state in all component and manipulate anywhere in app make app unpredictable and hard to manage



2 class component . container / stateful components
class Cmp extends Component {
  render() { return <div> JSX HERE </div>}
}
render
use { } to wrap js func for dynamic use
----------------------------------------------------
props: outside info
pass data from parent wraping component  to a child by < />  
pass valued parameter between different js file and output them
Person=(props)=> { return {props.name}}

use class based component use {this.props}

<component />
<component> </component>
{props.children} could output anything between closing tag component <></>
------------------------------------------------------
state: inside class component info
inside component
special property: state only use by class component (like constructor)
state's change will rerender& update DOM

------------------------------
40 event handler func use arrow func
if not arrow func, 'this' will not refer to this class and reach state property
then button use {this.xx}
no () after this.xx, since don;t execute it immediately, only click
reference: different event handler
https://reactjs.org/docs/events.html#supported-events

41 change state setState( {
  take obj as argument, merge defined exist state/
});

---------------------------------
state in func component by use 
assign a capitalized variable const App = () => { ... }
--------------------------------

react hook React 16.8
istead of state={}
change class component to function component
collection of func 

set state could use multiple seperate  state slice
useState({
  state's staff
}); 
return array with only two element,
 1st element is access state, // instead of state = 
2nd elem is a function allow us to update/replace this state to re render component //instead of setState()  merge, but replace
so need manually add all in setxxState, or use useState again
use js arr destructing [1st, 2nd] pull element out of the right side 
this.state change to 1st element.state


add func to a functinal component, just add const in front of func name
----------------------------------
stateful component (container component):
manage component no matter useState hook or classbased setState
stateless component (dumb/presentational component):
no state in this component
better to use stateless component in application, only use state in a few component. otherwise it hard to reuse and maintain

pass method to props to call a mehtod which change state in another/parent component
pass new data in method
recommend use bind
1: bind(this, new value)
   onClick={switchNameHandler.bind(this, 'aa')
2 onClick={() => switchNameHandler('aa')}

-----------------------
input change

----------------------
style
1 import css to same component js file
2 inline style:  jsx style={ }  restrict with hover ... only for this element